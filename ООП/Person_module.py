class Person: #  определение класса Person — шаблон для создания объектов «человек»
    def __init__(self, name, age, gender, height, weight):# конструктор: вызывается при создании экземпляра
        self.name = name # сохраняем аргумент name в атрибут экземпляра
        self.age = age# сохраняем age
        self.gender = gender# сохраняем gender
        self.height = height# сохраняем height (см)
        self.weight = weight# сохраняем weight (кг)

    def __del__(self):# деструктор — вызывается при удалении объекта/сборке мусора (не гарантированно при выходе)
        print("объект удален") # печатаем сообщение (учти: _del_ не надёжен для важной очистки ресурсов)

    def greet(self):# метод, который приветствует человека
        print(f"привет меня зовут {self.name}")# использует атрибут name

    def birthday(self):# метод для увеличения возраста на один год
        self.age += 1# инкрементируем age
        print(f"с днем рождения, теперь мне {self.age} лет")# информируем пользователя

    def update_weight(self, new_weihgt):
        self.weight = new_weihgt # присваиваем новый вес
        print(f"теперь мой вес {self.weight} кг") # выведем новый вес

    def update_height(self, new_height):# обновление роста
        self.height = new_height
        print(f"теперь мой рост {self.height} см")

    def human_or_woman(self):
        print(f"привет мой пол это {self.gender}")

    def info(self):# метод, который печатает краткую информацию о человеке
        print(f"{self.name}, {self.age} лет, {self.gender}, рост {self.height} см, вес {self.weight} кг")

# anna = Person("анна", 30, "женский", 165, 60)
# """Создаётся экземпляр класса Person.
# Вызов конструктора _init_ сохраняет переданные значения в атрибуты объекта:
# name="анна", age=30, gender="женский", height=165, weight=60."""
# anna.greet()
# """Вызывается метод greet, который выполняет print(f"привет меня зовут {self.name}")."""
# anna.info()
# """Метод info печатает строку с текущими данными объекта. В этот момент значения — как при создании, кроме каких-либо изменений."""
# anna.birthday()
# """Метод birthday увеличивает self.age на 1 (self.age += 1) и затем печатает сообщение."""
# anna.update_weight(120)
# """Метод update_weight присваивает self.weight = 120 и печатает новый вес. (В коде параметр назван new_weihgt — опечатка в имени, но это не мешает работе.)
# """
# anna.update_height(175)
# """Метод update_height присваивает self.height = 175 и печатает новый рост."""
#
# print("программа завершена")
#
# def test():
#     anna = Person("анна", 30, "женский", 165, 60)
#     """Здесь вы определяете функцию test.
#      Внутри функции создаётся локальная переменная anna (новый объект Person) — это не тот anna,
#      который был создан снаружи, а отдельный экземпляр с теми же начальными параметрами.
#      Пока test() не вызвана, этот код не исполняется."""
# test()
# """При вызове test() внутри неё создаётся локальный Person.
# После выхода из функции на этот локальный объект обычно нет ссылок,
# поэтому он становится кандидатом на удаление."""
#
# print("программа завершена")
#
# anna.name = "человек пук"
# """Меняет имя внешнего (первого) объекта anna на "человек пук". Это модифицирует атрибут name существующего объекта."""
# anna.gender = "биба и боба"
# """Меняет поле gender внешнего объекта anna на "биба и боба"."""
# anna.info()
# """Печатает обновлённые данные внешнего anna"""